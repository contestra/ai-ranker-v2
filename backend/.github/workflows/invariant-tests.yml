name: Invariant Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  routing-invariants:
    name: OpenAI Model Routing Invariants
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Set required environment
      run: |
        echo "MODEL_ADJUST_FOR_GROUNDING=true" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
        echo "ALLOWED_OPENAI_MODELS=gpt-5,gpt-5-chat-latest" >> $GITHUB_ENV
    
    - name: Run routing invariant tests
      run: |
        # One-liner invariant - MUST pass
        pytest tests/test_openai_model_routing.py::test_routing_invariant_oneliner -xvs
        
        # Full routing test suite
        pytest tests/test_openai_model_routing.py -xvs
        
        # Legacy invariant tests
        pytest tests/test_openai_routing_invariant.py::test_openai_routing_invariant_oneliner -xvs
    
    - name: Run resolver budget invariants
      run: |
        pytest tests/test_resolver_budget.py -xvs
    
    - name: Verify critical configuration
      run: |
        python -c "
import os
import sys

# Critical production configuration checks
errors = []

if os.getenv('MODEL_ADJUST_FOR_GROUNDING', 'false').lower() != 'true':
    errors.append('MODEL_ADJUST_FOR_GROUNDING must be true in production')

if not os.getenv('ALLOWED_OPENAI_MODELS', ''):
    errors.append('ALLOWED_OPENAI_MODELS must include both gpt-5 and gpt-5-chat-latest')

if errors:
    print('CONFIGURATION ERRORS:')
    for error in errors:
        print(f'  ❌ {error}')
    sys.exit(1)
else:
    print('✅ All critical configuration checks passed')
"