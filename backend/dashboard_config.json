{
  "dashboard": {
    "title": "LLM Adapter Observability",
    "description": "7-day trends for grounding and citation metrics",
    "refresh": "30s",
    "panels": [
      {
        "title": "Grounding Success Rate",
        "type": "timeseries",
        "metrics": [
          {
            "query": "rate(router.grounded.effective) / rate(adapter.requests.grounded)",
            "label": "Grounding Success %"
          }
        ],
        "timeRange": "7d"
      },
      {
        "title": "REQUIRED Mode Enforcement",
        "type": "pie",
        "metrics": [
          {
            "query": "sum(router.required.pass)",
            "label": "Pass"
          },
          {
            "query": "sum(router.required.fail.no_tool)",
            "label": "Fail: No Tool"
          },
          {
            "query": "sum(router.required.fail.no_anchor)",
            "label": "Fail: No Anchor"
          }
        ],
        "timeRange": "7d"
      },
      {
        "title": "Tools Requested vs Used",
        "type": "bar",
        "metrics": [
          {
            "query": "sum(adapter.tools.requested) by (model)",
            "label": "Requested"
          },
          {
            "query": "sum(adapter.tools.used) by (model)",
            "label": "Used"
          }
        ],
        "groupBy": "model",
        "timeRange": "7d"
      },
      {
        "title": "Citation Types",
        "type": "stacked",
        "metrics": [
          {
            "query": "sum(adapter.citations.anchored)",
            "label": "Anchored",
            "color": "green"
          },
          {
            "query": "sum(adapter.citations.unlinked)",
            "label": "Unlinked",
            "color": "yellow"
          }
        ],
        "timeRange": "7d"
      },
      {
        "title": "Model Usage Distribution",
        "type": "heatmap",
        "metrics": [
          {
            "query": "count(adapter.requests.total) by (vendor, model)",
            "label": "Requests"
          }
        ],
        "timeRange": "7d"
      },
      {
        "title": "Error Rates",
        "type": "timeseries",
        "metrics": [
          {
            "query": "rate(errors.grounding_not_supported)",
            "label": "Grounding Not Supported",
            "color": "red"
          },
          {
            "query": "rate(errors.timeout)",
            "label": "Timeouts",
            "color": "orange"
          },
          {
            "query": "rate(errors.rate_limit)",
            "label": "Rate Limits",
            "color": "yellow"
          }
        ],
        "timeRange": "7d"
      },
      {
        "title": "P95 Latency",
        "type": "gauge",
        "metrics": [
          {
            "query": "histogram_quantile(0.95, latency.total_ms)",
            "label": "P95 Total",
            "unit": "ms",
            "thresholds": {
              "green": 1000,
              "yellow": 3000,
              "red": 5000
            }
          }
        ],
        "timeRange": "1h"
      }
    ],
    "alerts": [
      {
        "name": "Low Grounding Success",
        "condition": "rate(router.grounded.effective) / rate(adapter.requests.grounded) < 0.5",
        "duration": "5m",
        "severity": "warning"
      },
      {
        "name": "REQUIRED Mode Failures Spike",
        "condition": "rate(router.required.fail.no_tool) + rate(router.required.fail.no_anchor) > 10",
        "duration": "2m",
        "severity": "critical"
      }
    ]
  },
  "datasource": {
    "type": "prometheus",
    "url": "${PROMETHEUS_URL}",
    "headers": {
      "Authorization": "Bearer ${PROMETHEUS_TOKEN}"
    }
  },
  "instructions": {
    "grafana": [
      "1. Import this JSON into Grafana",
      "2. Set datasource to your Prometheus instance",
      "3. Configure alerts to send to Slack/PagerDuty"
    ],
    "datadog": [
      "1. Convert metrics to Datadog format using dd-agent",
      "2. Use tags: vendor, model, grounding_mode",
      "3. Create monitors based on alert conditions"
    ],
    "cloudwatch": [
      "1. Use PutMetricData API with namespace 'LLM/Adapters'",
      "2. Create CloudWatch dashboard from JSON",
      "3. Set up SNS topics for alerts"
    ]
  }
}